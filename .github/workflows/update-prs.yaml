name: Auto Update Approved PRs with Conflict Handling

on:
  push:
    branches:
      - main  # Sostituisci con il tuo branch base se diverso
  workflow_dispatch:

jobs:
  update-pr:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Necessario per operazioni di rebase

      - name: Set up Git configuration
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Fetch All Branches
        run: git fetch --all

      - name: Get List of Open PRs
        id: get_open_prs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr list --state open --json number,headRefName,baseRefName,isDraft,mergeable --jq '.[] | select(.baseRefName == "main" and .mergeable == "MERGEABLE") | .number' > pr_numbers.txt
          echo "List of PRs:"
          cat pr_numbers.txt

      - name: Check PR Reviews and Handle Conflicts
        id: check_pr_reviews_and_conflicts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          approved_pr_count=0
          touch approved_pr_numbers.txt
          for pr in $(cat pr_numbers.txt); do
            echo "Checking PR #$pr..."
            reviews=$(gh pr view $pr --json reviews --jq '.reviews[] | select(.state == "APPROVED")')
            echo "Reviews for PR #$pr: $reviews"
            if [ -n "$reviews" ]; then
              echo "PR #$pr has approved reviews."
              echo $pr >> approved_pr_numbers.txt
              approved_pr_count=$((approved_pr_count + 1))
            else
              echo "PR #$pr does not have approved reviews."
            fi
          done
          echo "Approved PR count: $approved_pr_count"
          echo "APPROVED_PR_COUNT=$approved_pr_count" >> $GITHUB_ENV

      - name: Rebase Approved PRs on Main
        if: env.APPROVED_PR_COUNT != '0'
        run: |
          echo "Approved PRs to be rebased:"
          cat approved_pr_numbers.txt
          while read -r pr; do
            echo "Updating PR #$pr..."

            # Aggiungi il remote del fork del contributore
            fork_url=$(gh pr view $pr --json headRepository --jq '.headRepository.url')
            git remote add contributor-fork ${fork_url}.git

            # Recupera i dati del fork
            git fetch contributor-fork

            # Checkout del branch della PR
            pr_branch=$(gh pr view $pr --json headRefName --jq '.headRefName')
            git checkout -b pr-$pr contributor-fork/$pr_branch

            # Rebase e push
            git fetch origin main
            git rebase origin/main || (
              echo "Rebase failed. Resolving conflicts..."
              git rebase --abort
              exit 1
            )

            # Push forzato del branch rebased verso il fork del contributore
            git push --force-with-lease contributor-fork pr-$pr
            
            echo "Successfully rebased and pushed PR #$pr"
          done < approved_pr_numbers.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Complete Workflow
        if: always()
        run: echo "PR update process completed."
